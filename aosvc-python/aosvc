#!/usr/bin/env python3
import argparse
import configparser
import http.server
import json
import logging
import pathlib


logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO)
logger = logging.getLogger()


class Config:
    def __init__(self):
        self.user = ''

    @property
    def AWS_CREDENTIALS_PATH(self):
        return pathlib.Path(f'~{self.user}/.aws/credentials').expanduser()


config = Config()


class MyRequestHandler(http.server.BaseHTTPRequestHandler):
    def _resp(self, status_code=http.HTTPStatus.OK, content=None):
        self.send_response(status_code)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, OPTIONS')
        self.send_header('Access-Control-Allow-Private-Network', 'true')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Accept-Encoding, accept, origin, Access-Control-Allow-Private-Network')
        self.send_header('Connection', 'close')
        if content is not None:
            if hasattr(content, 'encode'):
                content = content.encode()
            elif not isinstance(content, str):
                content = str(content).encode()
            self.send_header('Content-Length', str(len(content)))
        self.end_headers()

        if content is not None:
            self.wfile.write(content)

    def parse_request(self):
        if not super().parse_request():
            logger.error(f'bad request! {self.raw_requestline!r}')
            return False

        if self.path.rstrip('/') != '/update':
            self._resp(http.HTTPStatus.NOT_FOUND)
            return False

        return True

    def do_OPTIONS(self):
        return self._resp(http.HTTPStatus.NO_CONTENT)

    def do_POST(self):
        try:
            credentials = json.loads(self.rfile.read(int(self.headers['Content-Length'])))
        except Exception as e:
            logger.exception('Error parsing request!')
            return self._resp(http.HTTPStatus.BAD_REQUEST, f'{type(e).__name__}: {e}')

        if not credentials:
            logger.error('Got empty request!')
            return self._resp(http.HTTPStatus.BAD_REQUEST, 'Empty credentials')

        try:
            # The default_section argument makes sure we have the section even if it's not in the file (or there is no file)
            ini = configparser.ConfigParser(default_section='default')
            ini.read(config.AWS_CREDENTIALS_PATH)
            section = ini['default']
            section['aws_access_key_id'] = credentials['AccessKeyId']
            section['aws_secret_access_key'] = credentials['SecretAccessKey']
            section['aws_session_token'] = credentials['SessionToken']
            section['aws_session_expiration'] = credentials['Expiration']
            with config.AWS_CREDENTIALS_PATH.open('w') as f:
                ini.write(f, space_around_delimiters=False)
        except Exception as e:
            logger.exception('Error updating credentials file!')
            return self._resp(http.HTTPStatus.INTERNAL_SERVER_ERROR, f'{type(e).__name__}: {e}')

        return self._resp(http.HTTPStatus.OK, 'ok')


def main():
    p = argparse.ArgumentParser(conflict_handler='resolve')
    p.add_argument('-h', '--host', default='127.0.0.1')
    p.add_argument('-p', '--port', type=int, default=31339)
    p.add_argument('-u', '--user')
    args = p.parse_args()

    if args.user:
        config.user = args.user

    config.AWS_CREDENTIALS_PATH.parent.mkdir(parents=True, exist_ok=True)

    server = http.server.HTTPServer((args.host, args.port), MyRequestHandler)
    logger.info(f'Serving on {server.server_address[0]}:{server.server_address[1]}')
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        server.server_close()


if __name__ == "__main__":
    main()
